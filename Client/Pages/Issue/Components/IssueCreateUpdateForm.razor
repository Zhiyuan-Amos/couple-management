@using Couple.Shared.Model
<div class="d-flex flex-column mh-100 overflow-hidden" style="padding-bottom: 14px; padding-top: 56px;">
    <div class="m-3">
        <label class="mb-0 form-label">
            Title
        </label>
        <input @bind="CreateUpdateIssueStateContainer.Title"
               @bind:event="oninput"
               class="form-control">
    </div>
    <div class="px-3">
        <label>
            For
        </label>
    </div>
    <div class="btn-group px-3 pb-3 w-100">
        <input autocomplete="off"
               checked="@(For.Him.Equals(CreateUpdateIssueStateContainer.For))"
               class="btn-check"
               name="btnradio"
               type="radio">
        <label class="btn btn-outline-primary"
               @onclick="@(() => OnForChange(For.Him))">
            <i class="align-middle" style="content: url('icons/male.svg')"></i>
        </label>
        <input autocomplete="off"
               checked="@(For.Her.Equals(CreateUpdateIssueStateContainer.For))"
               class="btn-check"
               name="btnradio"
               type="radio">
        <label class="btn btn-outline-primary"
               @onclick="@(() => OnForChange(For.Her))">
            <i class="align-middle" style="content: url('icons/female.svg')"></i>
        </label>
        <input autocomplete="off"
               checked="@(For.Us.Equals(CreateUpdateIssueStateContainer.For))"
               class="btn-check"
               name="btnradio"
               type="radio">
        <label class="btn btn-outline-primary"
               @onclick="@(() => OnForChange(For.Us))">
            <i class="align-middle" style="content: url('icons/us.svg')"></i>
        </label>
    </div>
    <div class="px-3">
        <label class="mb-0 form-label">
            To Dos
        </label>
    </div>
    <div class="px-3 mb-3 overflow-auto">
        @foreach (var (task, index) in Tasks.Select((item, index) => (item, index)))
        {
            <input class="form-control"
                   @oninput="@(e => SetContent(index, e.Value!.ToString()!))"
                   value="@task.Content"/>
        }
    </div>
    <div class="d-grid px-3">
        <button class="btn btn-light"
                disabled="@(!IsAddNewTaskEnabled)"
                @onclick="@AddNewTask"
                type="button">
            Add New
        </button>
        <button class="btn btn-secondary"
                disabled="@(!IsSaveEnabled)"
                @onclick="@Save"
                type="button">
            Save
        </button>
    </div>
</div>