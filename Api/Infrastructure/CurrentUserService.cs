using System.Net.Http.Headers;
using System.Security.Claims;
using System.Text;
using System.Text.Json;

namespace Couple.Api.Infrastructure;

public class CurrentUserService : ICurrentUserService
{
    private const string ClaimTypePartnerId = "PartnerId";

    public Claims GetClaims(HttpHeaders headers)
    {
        var clientPrincipal = StaticWebAppsAuth.Parse(headers);
        return new(clientPrincipal.FindFirstValue(ClaimTypes.NameIdentifier),
            clientPrincipal.FindFirstValue(ClaimTypes.Email),
            clientPrincipal.FindFirstValue(ClaimTypePartnerId));
    }

    // from https://docs.microsoft.com/en-us/azure/static-web-apps/user-information?tabs=csharp#api-functions
    private static class StaticWebAppsAuth
    {
        private class ClientPrincipal
        {
            public string? IdentityProvider { get; set; }
            public string? UserId { get; set; }
            public string? UserDetails { get; set; }
            public IEnumerable<string>? UserRoles { get; set; }
        }

        public static ClaimsPrincipal Parse(HttpHeaders headers)
        {
            var data = headers.GetValues("x-ms-client-principal").First();
            var decoded = Convert.FromBase64String(data);
            var json = Encoding.ASCII.GetString(decoded);
            var principal = JsonSerializer.Deserialize<ClientPrincipal>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            var roles = principal.UserRoles
                .Where(role => role != "anonymous"
                               && role != "authenticated"
                               && !role.StartsWith("id_")
                               && !role.StartsWith("partnerid_"))
                .Select(r => new Claim(ClaimTypes.Role, r))
                .ToList();

            if (!roles.Any())
            {
                return new();
            }

            var adminAssignedId = principal.UserRoles
                .Single(role => role.StartsWith("id_"));
            var partnerId = principal.UserRoles
                .Single(role => role.StartsWith("partnerid_"));

            var identity = new ClaimsIdentity(principal.IdentityProvider);

            // Azure Static Web App does not allow us to add custom properties. Therefore,
            // PartnerId needs to be stored as a role instead. However, the default Id generated by Azure SWA
            // is longer than 25 characters, and Azure SWA disallows roles from having more than 25 characters.
            // Therefore, this is the temporary workaround in order to store partnerId.
            // By right we should be using principal.UserId, which is pending AAD B2C implementation:
            // See https://github.com/Azure/static-web-apps/issues/3
            // An alternative implementation is to return a custom Cookie / JWT, but that requires more effort
            // with little gains, given the current state of the project.
            identity.AddClaim(new(ClaimTypes.NameIdentifier, adminAssignedId[3..]));
            identity.AddClaim(new(ClaimTypes.Email, principal.UserDetails));
            identity.AddClaim(new(ClaimTypePartnerId, partnerId[10..]));
            identity.AddClaims(roles);
            return new(identity);
        }
    }
}
